{"ast":null,"code":"var _jsxFileName = \"/Users/ravichasuksawasdinaayuthaya/Fullstack Practice/Altcademy/ReactJS-SPA/Currency-converter-ReactJS/src/graph.js\";\nimport React from 'react';\nimport { json, checkStatus } from './util';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getHistoricalRates = (base, quote) => {\n      const {\n        lastMonth,\n        today\n      } = this.state;\n      fetch(`https://api.frankfurter.app/${lastMonth}..${today}?from=${base}&to=${quote}`).then(checkStatus).then(json).then(data => {\n        if (data.error) {\n          throw new Error(data.error);\n        }\n        const chartLabels = Object.keys(data.rates); // Dates\n        const chartData = Object.values(data.rates).map(rate => rate[quote]); // Rates\n        const chartLabel = `${base}/${quote}`;\n        this.buildChart(chartLabels, chartData, chartLabel);\n      }).catch(error => {\n        this.setState({\n          error: error.message\n        });\n        console.error('Error fetching historical rates:', error);\n      });\n    };\n    this.buildChart = (labels, data, label) => {\n      if (this.chart) {\n        this.chart.destroy(); // Destroy previous chart instance\n      }\n      this.chart = new Chart(this.chartRef.current, {\n        type: 'line',\n        data: {\n          labels,\n          datasets: [{\n            label: label,\n            data,\n            fill: false,\n            borderColor: 'rgba(75, 192, 192, 1)',\n            tension: 0.1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top'\n            }\n          },\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Date'\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Exchange Rate'\n              }\n            }\n          }\n        }\n      });\n    };\n    const _today = new Date();\n    const _lastMonth = new Date();\n    _lastMonth.setMonth(_today.getMonth() - 1); // Set date to 1 month ago\n\n    this.state = {\n      timeSeries: {},\n      today: _today.toISOString().split('T')[0],\n      // Format date as YYYY-MM-DD\n      lastMonth: _lastMonth.toISOString().split('T')[0],\n      error: ''\n    };\n    this.chartRef = /*#__PURE__*/React.createRef(); // Create a ref for the chart\n  }\n  componentDidMount() {\n    const {\n      baseCurrency,\n      targetCurrency\n    } = this.props.match.params; // Get params from URL\n    this.getHistoricalRates(baseCurrency, targetCurrency); // Fetch historical rates\n  }\n  render() {\n    const {\n      error\n    } = this.state;\n    const {\n      baseCurrency,\n      targetCurrency\n    } = this.props.match.params;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Time Series for \", baseCurrency, \" to \", targetCurrency]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this) // Canvas for Chart.js\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Graph;","map":{"version":3,"names":["React","json","checkStatus","Chart","jsxDEV","_jsxDEV","Graph","Component","constructor","props","getHistoricalRates","base","quote","lastMonth","today","state","fetch","then","data","error","Error","chartLabels","Object","keys","rates","chartData","values","map","rate","chartLabel","buildChart","catch","setState","message","console","labels","label","chart","destroy","chartRef","current","type","datasets","fill","borderColor","tension","options","responsive","plugins","legend","display","position","scales","x","title","text","y","Date","setMonth","getMonth","timeSeries","toISOString","split","createRef","componentDidMount","baseCurrency","targetCurrency","match","params","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["/Users/ravichasuksawasdinaayuthaya/Fullstack Practice/Altcademy/ReactJS-SPA/Currency-converter-ReactJS/src/graph.js"],"sourcesContent":["import React from 'react';\nimport { json, checkStatus } from './util';\nimport Chart from 'chart.js/auto';\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    const today = new Date();\n    const lastMonth = new Date();\n    lastMonth.setMonth(today.getMonth() - 1); // Set date to 1 month ago\n\n    this.state = {\n      timeSeries: {},\n      today: today.toISOString().split('T')[0], // Format date as YYYY-MM-DD\n      lastMonth: lastMonth.toISOString().split('T')[0],\n      error: '',\n    };\n\n    this.chartRef = React.createRef(); // Create a ref for the chart\n  }\n\n  componentDidMount() {\n    const { baseCurrency, targetCurrency } = this.props.match.params; // Get params from URL\n    this.getHistoricalRates(baseCurrency, targetCurrency); // Fetch historical rates\n  }\n\n  getHistoricalRates = (base, quote) => {\n    const { lastMonth, today } = this.state;\n    fetch(`https://api.frankfurter.app/${lastMonth}..${today}?from=${base}&to=${quote}`)\n      .then(checkStatus)\n      .then(json)\n      .then((data) => {\n        if (data.error) {\n          throw new Error(data.error);\n        }\n        const chartLabels = Object.keys(data.rates); // Dates\n        const chartData = Object.values(data.rates).map((rate) => rate[quote]); // Rates\n        const chartLabel = `${base}/${quote}`;\n        this.buildChart(chartLabels, chartData, chartLabel);\n      })\n      .catch((error) => {\n        this.setState({ error: error.message });\n        console.error('Error fetching historical rates:', error);\n      });\n  };\n\n  buildChart = (labels, data, label) => {\n    if (this.chart) {\n      this.chart.destroy(); // Destroy previous chart instance\n    }\n\n    this.chart = new Chart(this.chartRef.current, {\n      type: 'line',\n      data: {\n        labels,\n        datasets: [\n          {\n            label: label,\n            data,\n            fill: false,\n            borderColor: 'rgba(75, 192, 192, 1)',\n            tension: 0.1,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top',\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date',\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Exchange Rate',\n            },\n          },\n        },\n      },\n    });\n  };\n\n  render() {\n    const { error } = this.state;\n    const { baseCurrency, targetCurrency } = this.props.match.params;\n\n    return (\n      <div className=\"container\">\n        <h2>Time Series for {baseCurrency} to {targetCurrency}</h2>\n        {error ? (\n          <p className=\"text-danger\">{error}</p>\n        ) : (\n          <canvas ref={this.chartRef} /> // Canvas for Chart.js\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}