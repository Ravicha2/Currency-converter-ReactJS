{"ast":null,"code":"var _jsxFileName = \"/Users/ravichasuksawasdinaayuthaya/Fullstack Practice/Altcademy/ReactJS-SPA/Currency-converter-ReactJS/src/graph.js\";\nimport React from 'react';\nimport { json, checkStatus } from './util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    const today = new Date();\n    const lastMonth = new Date();\n    lastMonth.setMonth(today.getMonth() - 1); // Set date to 1 month ago\n\n    this.state = {\n      timeSeries: {},\n      today: today.toISOString().split('T')[0],\n      // Format date as YYYY-MM-DD\n      lastMonth: lastMonth.toISOString().split('T')[0],\n      error: ''\n    };\n  }\n  componentDidMount() {\n    const {\n      baseCurrency,\n      targetCurrency\n    } = this.props.match.params.id; //error here\n    const {\n      lastMonth,\n      today\n    } = this.state;\n\n    // Fetch time series data for the selected currency pair over the past month\n    fetch(`https://api.frankfurter.app/${lastMonth}..${today}?from=${baseCurrency}&to=${targetCurrency}`).then(checkStatus).then(json).then(data => {\n      if (data) {\n        this.setState({\n          timeSeries: data.rates,\n          error: ''\n        });\n      } else {\n        throw new Error('Failed to fetch data');\n      }\n    }).catch(error => {\n      this.setState({\n        error: error.message\n      });\n      console.error('Error fetching time series data:', error);\n    });\n  }\n  render() {\n    const {\n      timeSeries,\n      error\n    } = this.state;\n    const {\n      baseCurrency,\n      targetCurrency\n    } = this.props.match.params;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Time Series for \", baseCurrency, \" to \", targetCurrency]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Rate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.entries(timeSeries).map(([date, rates]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: rates[targetCurrency]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 19\n            }, this)]\n          }, date, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Graph;","map":{"version":3,"names":["React","json","checkStatus","jsxDEV","_jsxDEV","Graph","Component","constructor","props","today","Date","lastMonth","setMonth","getMonth","state","timeSeries","toISOString","split","error","componentDidMount","baseCurrency","targetCurrency","match","params","id","fetch","then","data","setState","rates","Error","catch","message","console","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","date"],"sources":["/Users/ravichasuksawasdinaayuthaya/Fullstack Practice/Altcademy/ReactJS-SPA/Currency-converter-ReactJS/src/graph.js"],"sourcesContent":["import React from 'react';\nimport { json, checkStatus } from './util';\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    const today = new Date();\n    const lastMonth = new Date();\n    lastMonth.setMonth(today.getMonth() - 1);  // Set date to 1 month ago\n\n    this.state = {\n      timeSeries: {},\n      today: today.toISOString().split('T')[0],  // Format date as YYYY-MM-DD\n      lastMonth: lastMonth.toISOString().split('T')[0],\n      error: '',\n    };\n  }\n\n  componentDidMount() {\n    const { baseCurrency, targetCurrency } = this.props.match.params.id;  //error here\n    const { lastMonth, today } = this.state;\n\n    // Fetch time series data for the selected currency pair over the past month\n    fetch(`https://api.frankfurter.app/${lastMonth}..${today}?from=${baseCurrency}&to=${targetCurrency}`)\n      .then(checkStatus)\n      .then(json)\n      .then((data) => {\n        if (data) {\n          this.setState({ timeSeries: data.rates, error: '' });\n        } else {\n          throw new Error('Failed to fetch data');\n        }\n      })\n      .catch((error) => {\n        this.setState({ error: error.message });\n        console.error('Error fetching time series data:', error);\n      });\n  }\n\n  render() {\n    const { timeSeries, error } = this.state;\n    const { baseCurrency, targetCurrency } = this.props.match.params;\n\n    return (\n      <div className=\"container\">\n        <h2>Time Series for {baseCurrency} to {targetCurrency}</h2>\n        {error ? (\n          <p>{error}</p>\n        ) : (\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Rate</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(timeSeries).map(([date, rates]) => (\n                <tr key={date}>\n                  <td>{date}</td>\n                  <td>{rates[targetCurrency]}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,WAAW,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,KAAK,SAASL,KAAK,CAACM,SAAS,CAAC;EAClCC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;IACxB,MAAMC,SAAS,GAAG,IAAID,IAAI,CAAC,CAAC;IAC5BC,SAAS,CAACC,QAAQ,CAACH,KAAK,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE;;IAE3C,IAAI,CAACC,KAAK,GAAG;MACXC,UAAU,EAAE,CAAC,CAAC;MACdN,KAAK,EAAEA,KAAK,CAACO,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAAG;MAC3CN,SAAS,EAAEA,SAAS,CAACK,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAChDC,KAAK,EAAE;IACT,CAAC;EACH;EAEAC,iBAAiBA,CAAA,EAAG;IAClB,MAAM;MAAEC,YAAY;MAAEC;IAAe,CAAC,GAAG,IAAI,CAACb,KAAK,CAACc,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC,CAAE;IACtE,MAAM;MAAEb,SAAS;MAAEF;IAAM,CAAC,GAAG,IAAI,CAACK,KAAK;;IAEvC;IACAW,KAAK,CAAC,+BAA+Bd,SAAS,KAAKF,KAAK,SAASW,YAAY,OAAOC,cAAc,EAAE,CAAC,CAClGK,IAAI,CAACxB,WAAW,CAAC,CACjBwB,IAAI,CAACzB,IAAI,CAAC,CACVyB,IAAI,CAAEC,IAAI,IAAK;MACd,IAAIA,IAAI,EAAE;QACR,IAAI,CAACC,QAAQ,CAAC;UAAEb,UAAU,EAAEY,IAAI,CAACE,KAAK;UAAEX,KAAK,EAAE;QAAG,CAAC,CAAC;MACtD,CAAC,MAAM;QACL,MAAM,IAAIY,KAAK,CAAC,sBAAsB,CAAC;MACzC;IACF,CAAC,CAAC,CACDC,KAAK,CAAEb,KAAK,IAAK;MAChB,IAAI,CAACU,QAAQ,CAAC;QAAEV,KAAK,EAAEA,KAAK,CAACc;MAAQ,CAAC,CAAC;MACvCC,OAAO,CAACf,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D,CAAC,CAAC;EACN;EAEAgB,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEnB,UAAU;MAAEG;IAAM,CAAC,GAAG,IAAI,CAACJ,KAAK;IACxC,MAAM;MAAEM,YAAY;MAAEC;IAAe,CAAC,GAAG,IAAI,CAACb,KAAK,CAACc,KAAK,CAACC,MAAM;IAEhE,oBACEnB,OAAA;MAAK+B,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBhC,OAAA;QAAAgC,QAAA,GAAI,kBAAgB,EAAChB,YAAY,EAAC,MAAI,EAACC,cAAc;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAC1DtB,KAAK,gBACJd,OAAA;QAAAgC,QAAA,EAAIlB;MAAK;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,gBAEdpC,OAAA;QAAO+B,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBACpChC,OAAA;UAAAgC,QAAA,eACEhC,OAAA;YAAAgC,QAAA,gBACEhC,OAAA;cAAAgC,QAAA,EAAI;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACbpC,OAAA;cAAAgC,QAAA,EAAI;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACX;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRpC,OAAA;UAAAgC,QAAA,EACGK,MAAM,CAACC,OAAO,CAAC3B,UAAU,CAAC,CAAC4B,GAAG,CAAC,CAAC,CAACC,IAAI,EAAEf,KAAK,CAAC,kBAC5CzB,OAAA;YAAAgC,QAAA,gBACEhC,OAAA;cAAAgC,QAAA,EAAKQ;YAAI;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACfpC,OAAA;cAAAgC,QAAA,EAAKP,KAAK,CAACR,cAAc;YAAC;cAAAgB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GAFzBI,IAAI;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGT,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV;AACF;AAEA,eAAenC,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}