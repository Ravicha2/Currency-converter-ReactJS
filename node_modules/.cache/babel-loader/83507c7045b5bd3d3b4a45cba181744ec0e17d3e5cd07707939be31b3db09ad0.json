{"ast":null,"code":"var _jsxFileName = \"/Users/ravichasuksawasdinaayuthaya/Fullstack Practice/Altcademy/ReactJS-SPA/Currency-converter-ReactJS/src/graph.js\";\nimport React from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { checkStatus, json } from './util';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeSeries: {},\n      error: '',\n      today: new Date().toISOString().split('T')[0],\n      // Today's date in YYYY-MM-DD\n      lastMonth: new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString().split('T')[0] // Date from 1 month ago\n    };\n  }\n  componentDidMount() {\n    const {\n      baseCurrency,\n      targetCurrency\n    } = this.props.match.params;\n    const {\n      lastMonth,\n      today\n    } = this.state;\n    const apiUrl = `https://api.frankfurter.app/${lastMonth}..${today}?from=${baseCurrency}&to=${targetCurrency}`;\n    fetch(apiUrl).then(checkStatus).then(json).then(data => {\n      if (data && data.rates) {\n        this.setState({\n          timeSeries: data.rates,\n          error: ''\n        });\n      } else {\n        throw new Error('Invalid data response from API');\n      }\n    }).catch(error => {\n      this.setState({\n        error: error.message || 'Error fetching exchange rate data'\n      });\n      console.error('Error fetching time series data:', error);\n    });\n  }\n  prepareChartData() {\n    const {\n      timeSeries\n    } = this.state;\n    const dataPoints = Object.entries(timeSeries).map(([date, rates]) => ({\n      x: date,\n      y: rates[this.props.match.params.targetCurrency]\n    }));\n    return {\n      datasets: [{\n        label: `Exchange Rate Over Time`,\n        data: dataPoints,\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\n        borderColor: 'rgba(75, 192, 192, 1)'\n      }]\n    };\n  }\n  render() {\n    const {\n      baseCurrency,\n      targetCurrency\n    } = this.props.match.params;\n    const {\n      error\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"mt-3 mb-4\",\n        children: [\"Exchange Rate of \", baseCurrency, \" to \", targetCurrency, \" Over the Last Month\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }, this), !error && /*#__PURE__*/_jsxDEV(Scatter, {\n        data: this.prepareChartData(),\n        options: {\n          scales: {\n            x: {\n              type: 'time',\n              // Set the x-axis to time\n              time: {\n                unit: 'day',\n                // Display data in daily intervals\n                tooltipFormat: 'YYYY-MM-DD' // Format for tooltip display\n              },\n              title: {\n                display: true,\n                text: 'Date'\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Exchange Rate'\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Graph;","map":{"version":3,"names":["React","Scatter","Chart","registerables","checkStatus","json","jsxDEV","_jsxDEV","register","Graph","Component","constructor","props","state","timeSeries","error","today","Date","toISOString","split","lastMonth","setMonth","getMonth","componentDidMount","baseCurrency","targetCurrency","match","params","apiUrl","fetch","then","data","rates","setState","Error","catch","message","console","prepareChartData","dataPoints","Object","entries","map","date","x","y","datasets","label","backgroundColor","borderColor","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","scales","type","time","unit","tooltipFormat","title","display","text"],"sources":["/Users/ravichasuksawasdinaayuthaya/Fullstack Practice/Altcademy/ReactJS-SPA/Currency-converter-ReactJS/src/graph.js"],"sourcesContent":["import React from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { checkStatus, json } from './util';\n\n// Register Chart.js components\nChart.register(...registerables);\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeSeries: {},\n      error: '',\n      today: new Date().toISOString().split('T')[0], // Today's date in YYYY-MM-DD\n      lastMonth: new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString().split('T')[0], // Date from 1 month ago\n    };\n  }\n\n  componentDidMount() {\n    const { baseCurrency, targetCurrency } = this.props.match.params;\n    const { lastMonth, today } = this.state;\n\n    const apiUrl = `https://api.frankfurter.app/${lastMonth}..${today}?from=${baseCurrency}&to=${targetCurrency}`;\n    \n    fetch(apiUrl)\n      .then(checkStatus)\n      .then(json)\n      .then((data) => {\n        if (data && data.rates) {\n          this.setState({ timeSeries: data.rates, error: '' });\n        } else {\n          throw new Error('Invalid data response from API');\n        }\n      })\n      .catch((error) => {\n        this.setState({ error: error.message || 'Error fetching exchange rate data' });\n        console.error('Error fetching time series data:', error);\n      });\n  }\n\n  prepareChartData() {\n    const { timeSeries } = this.state;\n    const dataPoints = Object.entries(timeSeries).map(([date, rates]) => ({\n      x: date,\n      y: rates[this.props.match.params.targetCurrency],\n    }));\n\n    return {\n      datasets: [\n        {\n          label: `Exchange Rate Over Time`,\n          data: dataPoints,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n        },\n      ],\n    };\n  }\n\n  render() {\n    const { baseCurrency, targetCurrency } = this.props.match.params;\n    const { error } = this.state;\n    \n    return (\n      <div className=\"container\">\n        <h2 className=\"mt-3 mb-4\">\n          Exchange Rate of {baseCurrency} to {targetCurrency} Over the Last Month\n        </h2>\n\n        {error && <p className=\"text-danger\">{error}</p>}\n\n        {!error && (\n          <Scatter\n            data={this.prepareChartData()}\n            options={{\n              scales: {\n                x: {\n                  type: 'time', // Set the x-axis to time\n                  time: {\n                    unit: 'day', // Display data in daily intervals\n                    tooltipFormat: 'YYYY-MM-DD', // Format for tooltip display\n                  },\n                  title: {\n                    display: true,\n                    text: 'Date',\n                  },\n                },\n                y: {\n                  title: {\n                    display: true,\n                    text: 'Exchange Rate',\n                  },\n                },\n              },\n            }}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}